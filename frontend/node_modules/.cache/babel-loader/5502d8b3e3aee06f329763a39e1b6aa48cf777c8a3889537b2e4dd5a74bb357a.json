{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91986\\\\VirtualTradeX\\\\frontend\\\\src\\\\components\\\\GeminiChat.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GeminiChat = () => {\n  _s();\n  const [input, setInput] = useState(\"\");\n  const [response, setResponse] = useState(\"\");\n  const handleSend = async () => {\n    const apiKey = \"YOUR_API_KEY\"; // Replace with your Gemini API key\n\n    try {\n      var _data$candidates, _data$candidates$, _data$candidates$$con, _data$candidates$$con2, _data$candidates$$con3;\n      const res = await fetch(\"https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=\" + apiKey, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          contents: [{\n            parts: [{\n              text: input\n            }]\n          }]\n        })\n      });\n      const data = await res.json();\n      const reply = (data === null || data === void 0 ? void 0 : (_data$candidates = data.candidates) === null || _data$candidates === void 0 ? void 0 : (_data$candidates$ = _data$candidates[0]) === null || _data$candidates$ === void 0 ? void 0 : (_data$candidates$$con = _data$candidates$.content) === null || _data$candidates$$con === void 0 ? void 0 : (_data$candidates$$con2 = _data$candidates$$con.parts) === null || _data$candidates$$con2 === void 0 ? void 0 : (_data$candidates$$con3 = _data$candidates$$con2[0]) === null || _data$candidates$$con3 === void 0 ? void 0 : _data$candidates$$con3.text) || \"No response\";\n      setResponse(reply);\n    } catch (error) {\n      console.error(\"Failed to get response from Gemini API\", error);\n      setResponse(\"‚ùå Failed to get response from Gemini API\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: styles.title,\n      children: \"\\uD83D\\uDCAC Gemini AI Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: input,\n      placeholder: \"Type your message...\",\n      onChange: e => setInput(e.target.value),\n      style: styles.input\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSend,\n      style: styles.button,\n      children: \"\\uD83D\\uDE80 Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.responseContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        style: styles.label,\n        children: \"Gemini says:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: styles.responseText,\n        children: response\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n\n// üé® Styles\n_s(GeminiChat, \"OuQdeN0dAF6xlFxhRB6RgT+UwP8=\");\n_c = GeminiChat;\nconst styles = {\n  container: {\n    padding: \"30px\",\n    maxWidth: \"600px\",\n    margin: \"40px auto\",\n    background: \"#f9f9f9\",\n    borderRadius: \"10px\",\n    boxShadow: \"0 0 15px rgba(0,0,0,0.1)\",\n    fontFamily: \"Arial, sans-serif\"\n  },\n  title: {\n    color: \"#4a90e2\",\n    textAlign: \"center\",\n    marginBottom: \"20px\"\n  },\n  input: {\n    width: \"calc(100% - 100px)\",\n    padding: \"10px\",\n    borderRadius: \"5px\",\n    border: \"1px solid #ccc\",\n    marginRight: \"10px\",\n    fontSize: \"16px\"\n  },\n  button: {\n    padding: \"10px 16px\",\n    backgroundColor: \"#4CAF50\",\n    color: \"#fff\",\n    border: \"none\",\n    borderRadius: \"5px\",\n    fontSize: \"16px\",\n    cursor: \"pointer\"\n  },\n  responseContainer: {\n    marginTop: \"30px\",\n    background: \"#fff\",\n    padding: \"15px\",\n    borderRadius: \"8px\",\n    border: \"1px solid #ddd\"\n  },\n  label: {\n    color: \"#333\",\n    fontWeight: \"bold\",\n    fontSize: \"18px\"\n  },\n  responseText: {\n    color: \"#555\",\n    marginTop: \"10px\",\n    whiteSpace: \"pre-wrap\"\n  }\n};\nexport default GeminiChat;\nvar _c;\n$RefreshReg$(_c, \"GeminiChat\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","GeminiChat","_s","input","setInput","response","setResponse","handleSend","apiKey","_data$candidates","_data$candidates$","_data$candidates$$con","_data$candidates$$con2","_data$candidates$$con3","res","fetch","method","headers","body","JSON","stringify","contents","parts","text","data","json","reply","candidates","content","error","console","style","styles","container","children","title","fileName","_jsxFileName","lineNumber","columnNumber","type","value","placeholder","onChange","e","target","onClick","button","responseContainer","label","responseText","_c","padding","maxWidth","margin","background","borderRadius","boxShadow","fontFamily","color","textAlign","marginBottom","width","border","marginRight","fontSize","backgroundColor","cursor","marginTop","fontWeight","whiteSpace","$RefreshReg$"],"sources":["C:/Users/91986/VirtualTradeX/frontend/src/components/GeminiChat.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst GeminiChat = () => {\r\n  const [input, setInput] = useState(\"\");\r\n  const [response, setResponse] = useState(\"\");\r\n\r\n  const handleSend = async () => {\r\n    const apiKey = \"YOUR_API_KEY\"; // Replace with your Gemini API key\r\n\r\n    try {\r\n      const res = await fetch(\r\n        \"https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=\" + apiKey,\r\n        {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify({\r\n            contents: [{ parts: [{ text: input }] }],\r\n          }),\r\n        }\r\n      );\r\n\r\n      const data = await res.json();\r\n      const reply = data?.candidates?.[0]?.content?.parts?.[0]?.text || \"No response\";\r\n      setResponse(reply);\r\n    } catch (error) {\r\n      console.error(\"Failed to get response from Gemini API\", error);\r\n      setResponse(\"‚ùå Failed to get response from Gemini API\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={styles.container}>\r\n      <h2 style={styles.title}>üí¨ Gemini AI Chat</h2>\r\n\r\n      <input\r\n        type=\"text\"\r\n        value={input}\r\n        placeholder=\"Type your message...\"\r\n        onChange={(e) => setInput(e.target.value)}\r\n        style={styles.input}\r\n      />\r\n      <button onClick={handleSend} style={styles.button}>\r\n        üöÄ Send\r\n      </button>\r\n\r\n      <div style={styles.responseContainer}>\r\n        <strong style={styles.label}>Gemini says:</strong>\r\n        <p style={styles.responseText}>{response}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// üé® Styles\r\nconst styles = {\r\n  container: {\r\n    padding: \"30px\",\r\n    maxWidth: \"600px\",\r\n    margin: \"40px auto\",\r\n    background: \"#f9f9f9\",\r\n    borderRadius: \"10px\",\r\n    boxShadow: \"0 0 15px rgba(0,0,0,0.1)\",\r\n    fontFamily: \"Arial, sans-serif\",\r\n  },\r\n  title: {\r\n    color: \"#4a90e2\",\r\n    textAlign: \"center\",\r\n    marginBottom: \"20px\",\r\n  },\r\n  input: {\r\n    width: \"calc(100% - 100px)\",\r\n    padding: \"10px\",\r\n    borderRadius: \"5px\",\r\n    border: \"1px solid #ccc\",\r\n    marginRight: \"10px\",\r\n    fontSize: \"16px\",\r\n  },\r\n  button: {\r\n    padding: \"10px 16px\",\r\n    backgroundColor: \"#4CAF50\",\r\n    color: \"#fff\",\r\n    border: \"none\",\r\n    borderRadius: \"5px\",\r\n    fontSize: \"16px\",\r\n    cursor: \"pointer\",\r\n  },\r\n  responseContainer: {\r\n    marginTop: \"30px\",\r\n    background: \"#fff\",\r\n    padding: \"15px\",\r\n    borderRadius: \"8px\",\r\n    border: \"1px solid #ddd\",\r\n  },\r\n  label: {\r\n    color: \"#333\",\r\n    fontWeight: \"bold\",\r\n    fontSize: \"18px\",\r\n  },\r\n  responseText: {\r\n    color: \"#555\",\r\n    marginTop: \"10px\",\r\n    whiteSpace: \"pre-wrap\",\r\n  },\r\n};\r\n\r\nexport default GeminiChat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}